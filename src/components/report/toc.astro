---
interface TocItem {
  depth: number;
  slug: string;
  text: string;
}

interface Props {
  items: TocItem[];
}

const { items } = Astro.props;
---

<div>
  <nav
    class="md:block lg:block pb-12 w-full md:w-[300px] max-h-screen overflow-y-auto overflow-x-visible md:sticky md:top-0"
  >
    <div class="overflow-x-visible relative pl-[1.5px]">
      <ul
        id="toc-list"
        class="px-6 py-6 z-20 border-l border-solid border-gray-300 hidden md:block"
      >
        {
          items.map((item) => (
            <li class={`text-sm ${item.depth > 1 ? "ml-4" : ""} relative`}>
              <a
                href={`#${item.slug}`}
                class={`underline-offset-4 ${item.depth > 1 ? "text-xs" : "text-sm"} inline-flex items-center hover:text-emerald-600 transition-colors duration-300 hover:underline py-1 `}
                data-toc-item
              >
                {item.text}
              </a>
            </li>
          ))
        }
      </ul>
      <div
        id="active-indicator"
        class="z-10 absolute left-[1px] w-full bg-emerald-500/10 transition-all duration-200 ease-in-out border-l-2 border-solid border-emerald-500 hidden md:block"
      >
      </div>
    </div>
  </nav>
  <button
    id="toc-toggle"
    class="fixed bottom-4 right-4 bg-gray-400 text-white p-3 rounded-full shadow-lg md:hidden z-50"
    aria-label="Toggle Table of Contents"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="h-6 w-6"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M4 6h16M4 10h16M4 14h16M4 18h8"></path>
    </svg>
  </button>
</div>

<script>
  function updateActiveItem() {
    const tocItems = document.querySelectorAll("[data-toc-item]");
    const headings = Array.from(document.querySelectorAll("h1, h2"));
    const activeIndicator = document.getElementById("active-indicator");

    let activeItem = null;

    headings.forEach((heading) => {
      const rect = heading.getBoundingClientRect();
      if (rect.top <= 100) {
        activeItem = document.querySelector(`[href="#${heading.id}"]`);
      }
    });

    tocItems.forEach((item) => {
      item.classList.remove("text-emerald-600", "font-bold");
    });

    if (activeItem && activeIndicator) {
      (activeItem as HTMLElement).classList.add(
        "text-emerald-600",
        "font-bold"
      );
      const itemRect = (activeItem as HTMLElement).getBoundingClientRect();
      const navRect = (activeItem as HTMLElement)
        ?.closest("nav")
        ?.getBoundingClientRect();
      const navElement = (activeItem as HTMLElement)?.closest("nav");

      if (navElement && navRect) {
        const navScrollTop = navElement.scrollTop;
        activeIndicator.style.top = `${itemRect.top - navRect.top + navScrollTop}px`;
        activeIndicator.style.height = `${itemRect.height}px`;

        // Ensure the active item is visible in the nav with smooth scrolling
        const itemTop = itemRect.top - navRect.top;
        const itemBottom = itemTop + itemRect.height;
        const navHeight = navElement.clientHeight;
        const DELTA_SCROLL = 400;

        if (itemTop < 0) {
          navElement.scrollTo({
            top: navElement.scrollTop + itemTop - DELTA_SCROLL,
            behavior: "smooth"
          });
        } else if (itemBottom > navHeight) {
          navElement.scrollTo({
            top: navElement.scrollTop + (itemBottom - navHeight) + DELTA_SCROLL,
            behavior: "smooth"
          });
        }
      }
    }
  }

  function toggleToc() {
    const tocList = document.getElementById("toc-list");
    const tocToggle = document.getElementById("toc-toggle");

    if (tocList && tocToggle) {
      tocList.classList.toggle("hidden");
      tocList.classList.toggle("fixed");
      tocList.classList.toggle("inset-0");
      tocList.classList.toggle("bg-white");
      tocList.classList.toggle("z-50");
      tocList.classList.toggle("overflow-y-auto");

      if (!tocList.classList.contains("hidden")) {
        tocToggle.innerHTML =
          '<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>';
      } else {
        tocToggle.innerHTML =
          '<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h8" /></path></svg>';
      }
    }
  }

  function hideTocOnMobile() {
    const tocList = document.getElementById("toc-list");
    const tocToggle = document.getElementById("toc-toggle");

    if (tocList && tocToggle && window.innerWidth < 768) {
      tocList.classList.add("hidden");
      tocList.classList.remove(
        "fixed",
        "inset-0",
        "bg-white",
        "z-50",
        "overflow-y-auto"
      );
      tocToggle.innerHTML =
        '<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h8" /></path></svg>';
    }
  }

  window.addEventListener("scroll", updateActiveItem);
  window.addEventListener("load", updateActiveItem);

  const tocToggle = document.getElementById("toc-toggle");
  if (tocToggle) {
    tocToggle.addEventListener("click", toggleToc);
  }

  const tocLinks = document.querySelectorAll("[data-toc-item]");
  tocLinks.forEach((link) => {
    link.addEventListener("click", hideTocOnMobile);
  });

  window.addEventListener("resize", hideTocOnMobile);
</script>
