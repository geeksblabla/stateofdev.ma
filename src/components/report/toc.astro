---
interface TocItem {
  depth: number;
  slug: string;
  text: string;
}

interface Props {
  items: TocItem[];
}

const { items } = Astro.props;
---

<nav
  class="hidden md:block pr-6 lg:block pb-12 w-[300px] max-h-screen overflow-y-auto overflow-x-visible sticky top-0"
>
  <div class="overflow-x-visible relative pl-[1.5px]">
    <div
      id="active-indicator"
      class="z-10 absolute left-[1px] w-0.5 rounded-full h-5 bg-emerald-500 transition-all duration-200 ease-in-out"
    >
    </div>
    <ul class="px-6 border-l border-solid border-gray-300">
      {
        items.map((item) => (
          <li class={`text-sm ${item.depth > 1 ? "ml-4" : ""} relative`}>
            <a
              href={`#${item.slug}`}
              class={`underline-offset-4 ${item.depth > 1 ? "text-xs" : "text-sm"} inline-flex items-center hover:text-emerald-600 transition-colors duration-200 hover:underline py-1`}
              data-toc-item
            >
              {item.text}
            </a>
          </li>
        ))
      }
    </ul>
  </div>
</nav>

<script>
  function updateActiveItem() {
    const tocItems = document.querySelectorAll("[data-toc-item]");
    const headings = Array.from(document.querySelectorAll("h1, h2"));
    const activeIndicator = document.getElementById("active-indicator");

    let activeItem = null;

    headings.forEach((heading) => {
      const rect = heading.getBoundingClientRect();
      if (rect.top <= 100) {
        activeItem = document.querySelector(`[href="#${heading.id}"]`);
      }
    });

    tocItems.forEach((item) => {
      item.classList.remove("text-emerald-600", "font-bold");
    });

    if (activeItem && activeIndicator) {
      (activeItem as HTMLElement).classList.add(
        "text-emerald-600",
        "font-bold"
      );
      const itemRect = (activeItem as HTMLElement).getBoundingClientRect();
      const navRect = (activeItem as HTMLElement)
        ?.closest("nav")
        ?.getBoundingClientRect();
      const navElement = (activeItem as HTMLElement)?.closest("nav");
      const navScrollTop = navElement ? navElement.scrollTop : 0;
      activeIndicator.style.top = `${itemRect.top - (navRect?.top || 0) + navScrollTop}px`;
      activeIndicator.style.height = `${itemRect.height}px`;
    }
  }

  window.addEventListener("scroll", updateActiveItem);
  window.addEventListener("load", updateActiveItem);
</script>
