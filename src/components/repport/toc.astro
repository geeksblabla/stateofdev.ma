---
interface TocItem {
  depth: number;
  slug: string;
  text: string;
}

interface Props {
  items: TocItem[];
}

const { items } = Astro.props;
---


<nav class="hidden md:block pl-8 lg:block mt-3 sticky top-20 p-2 pb-12 h-fit min-w-[350px] rounded-md border border-solid border-gray-300/50">
  <div>
    <ul>
      {items.map((item, index) => (
        <li class="text-lg my-3">
          <a
            href={`#${item.slug}`}
            class="underline-offset-4 text-base inline-flex items-center font-medium hover:text-emerald-600 transition-colors duration-200 hover:underline"
            data-toc-item
          >
            {String(index + 1).padStart(2, '0')} - {item.text}
          </a>
        </li>
      ))}
    </ul>
  </div>
</nav>

<script>
  function updateActiveItem() {
    const tocItems = document.querySelectorAll('[data-toc-item]');
    const headings = Array.from(document.querySelectorAll('h1, h2'));

    let activeItem = null;

    headings.forEach((heading) => {
      const rect = heading.getBoundingClientRect();
      if (rect.top <= 100) {
        activeItem = document.querySelector(`[href="#${heading.id}"]`);
      }
    });

    tocItems.forEach((item) => {
      item.classList.remove('text-emerald-600', 'font-bold');
    });
    if (activeItem) {
      (activeItem as HTMLElement).classList.add('text-emerald-600', 'font-bold');
    }
  }

  window.addEventListener('scroll', updateActiveItem);
  window.addEventListener('load', updateActiveItem);
</script>
